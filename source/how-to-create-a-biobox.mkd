# How to create a biobox

Bioboxes should follow an interface definition to allow interchangeable docker containers.
This page provides step by step description for creating a simple biobox and each step has a short example.
At the moment the only biobox type that can be implemented with this instructions is an assembler biobox with the version 0.9.0+.
For this tutorial you have to be familiar with [unix commands][] and [Docker][].


## Dockerize your tool

The first step is to containerize your tool by creating a [Dockerfile][] which is similar to a make file.
Every line in a Dockerfile is a command that will be executed by running the command

~~~shell
docker build -t arbitrary_tool_name .
~~~

in the directory of your Dockerfile.


### Example

The following dockerfile fetches ubuntu:14:04 as a base image, downloads velvet  and installs velvet in /usr/local/bin/.

~~~shell
FROM ubuntu:14.04

MAINTAINER Michael Barton, mail@michaelbarton.me.uk

ENV PACKAGES make gcc wget libc6-dev zlib1g-dev ca-certificates xz-utils

RUN apt-get update -y && apt-get install -y --no-install-recommends ${PACKAGES}

ENV ASSEMBLER_DIR /tmp/assembler

ENV ASSEMBLER_URL https://www.ebi.ac.uk/~zerbino/velvet/velvet_1.2.10.tgz

ENV ASSEMBLER_BLD make 'MAXKMERLENGTH=100' && mv velvet* /usr/local/bin/ && rm -r ${ASSEMBLER_DIR}

RUN mkdir ${ASSEMBLER_DIR}

RUN cd ${ASSEMBLER_DIR} &&\
wget --quiet ${ASSEMBLER_URL} --output-document - |\
tar xzf - --directory . --strip-components=1 && eval ${ASSEMBLER_BLD}
~~~

You can test this dockerfile with the following steps:

1.Copy and paste the above dockerfile in a file called "Dockerfile".
2.Run

~~~shell
docker build -t velvet .
~~~

in the same directory.

3.Run the command

~~~shell
docker run -it velvet /bin/bash
~~~

and you will access the container with the bash.

4.Run

~~~shell
./usr/local/bin/velvetg
~~~

and you will get velvets help page. Exit the container with CTRL+D.
A [Dockerfile][] has way more command that are worth to take a look at before you start to create a Dockerfile.

## Read the rfc

Each rfc document contains a description for an interface that is represented by a yaml file. Each assembler biobox specific input and
output type is specified in the [inputs][] and [outputs][] sections.

1.The first step is to check if your tool would work with the provided types.
In the assembler biobox specification this would be the fastq and fragment_size types.
If your assembler works with just providing the fastq parameter then you don't have to include the fragment_size parameter.

2.If you can not implement your biobox then just create a [new issue][]. The bioboxes community will help.

3.Each yaml that will be provided to your container should be tested with our [file-validator binary][].
The command line interface for this tool is:

~~~shell
validate-biobox-file --schema=schema.yml --input=input.yml
~~~

Each rfc links to a schema file that can be used with the validator.
You can find a description for how to integrate the file-validator in the
[biobox file validator][] section.

### Example

Our velvet example works with just the provided fastq type.
The above Dockerfile together with the file-validator looks like this:

~~~shell
FROM ubuntu:14.04

MAINTAINER Michael Barton, mail@michaelbarton.me.uk

ENV PACKAGES make gcc wget libc6-dev zlib1g-dev ca-certificates xz-utils

RUN apt-get update -y && apt-get install -y --no-install-recommends ${PACKAGES}

ENV ASSEMBLER_DIR /tmp/assembler

ENV ASSEMBLER_URL https://www.ebi.ac.uk/~zerbino/velvet/velvet_1.2.10.tgz

ENV ASSEMBLER_BLD make 'MAXKMERLENGTH=100' && mv velvet* /usr/local/bin/ && rm -r ${ASSEMBLER_DIR}

RUN mkdir ${ASSEMBLER_DIR}

RUN cd ${ASSEMBLER_DIR} &&\
    wget --quiet ${ASSEMBLER_URL} --output-document - |\
    tar xzf - --directory . --strip-components=1 && eval ${ASSEMBLER_BLD}

ENV BASE_URL https://s3-us-west-1.amazonaws.com/bioboxes-tools/validate-biobox-file

ENV VERSION  0.x.y

RUN mkdir /biobox-validator

RUN wget \
      --quiet \
      --output-document - \
      ${BASE_URL}/${VERSION}/validate-biobox-file.tar.xz \
    | tar xJf - \
      --directory /biobox-validator \
      --strip-components=1

ENV PATH ${PATH}:${VALIDATOR}

ADD schema.yaml ${VALIDATOR}
~~~

This file dowloads the file validator, adds it to the PATH variable and adds the schema.yaml with the [ADD][] command.

## Create the task

A biobox can be called with different modes or tasks. One task could be a default task.
The task is provided to the docker run command.

### Example

In our velvet example we have created a [script][] that provides a default and a careful task:

~~~shell
default: velveth ${TMP_DIR} 31 -fastq.gz ${READS} && velvetg ${TMP_DIR} -cov_cutoff auto
careful: velveth ${TMP_DIR} 91 -fastq.gz ${READS} && velvetg ${TMP_DIR} -cov_cutoff 10
~~~

## Putting it together

Now that we have specified our task, integrated the file-validator, we can now start to write a script that

1. Checks if the provided yaml has the correct format with the file-validator.
2. Runs the specified task.
3. Provides an output.yaml.

### Example

The script in the velvet assembler looks like this:

~~~shell
#!/bin/bash

set -o errexit
set -o nounset

INPUT=/bbx/input/biobox.yaml
OUTPUT=/bbx/output/bbx
TASK=$1

# Ensure the biobox.yml file is valid
validate-input --input ${INPUT} --schema /bbx/validator/schema.yaml
mkdir -p ${OUTPUT}

# Parse the read locations from this file
READS=$(yaml2json < ${INPUT} \
        | jq --raw-output '.arguments[] | select(has("fastq")) | .fastq[].value | "-short \(.)"' \
        | tr '\n' ' ')

TMP_DIR=$(mktemp -d)

# Run the given task
CMD=$(egrep ^${TASK}: /Taskfile | cut -f 2 -d ':')
if [[ -z ${CMD} ]]; then
  echo "Abort, no task found for '${TASK}'."
  exit 1
fi
eval ${CMD}

cp ${TMP_DIR}/contigs.fa ${OUTPUT}

cat << EOF > ${OUTPUT}/biobox.yaml
version: 0.9.0
arguments:
  - fasta:
    - id: velvet_contigs_1
      value: contigs.fa
      type: contigs
EOF
~~~

You see that the first part of the script checks the .yaml (/bbx/input/biobox.yaml) with the validate-input binary.
In the next step the yaml2json binary transforms the yaml to json and the [jq][] tool fetches the fastq entries.
Now that we have the paths to the fastq files, one of the task methods is called. On successful run a bioboxes.yaml is created as
specified in the [outputs][] section.

## Test it

The last step is now to check if your created container follows the bioboxes specification.
In our [bioboxes assembler validator][] section see how to validate your container.

### Example

~~~shell
# Fetch an example assembler biobox for testing
git clone git@github.com:bioboxes/velvet.git

docker run \
  --privileged \
  --rm \
  --env IMAGE=velvet \
  --env TASK=default \
  --volume $(pwd)/velvet:/build \
  bioboxes/validator-short-read-assembler
~~~

You can find the final [biobox velvet][] example in our Github repository.


[Docker]: http://www.docker.com
[install]: https://docs.docker.com/installation/
[unix commands]: http://en.wikipedia.org/wiki/List_of_Unix_commands
[velvet]:https://www.ebi.ac.uk/~zerbino/velvet/
[Dockerfile]:https://docs.docker.com/reference/builder/
[file-validator]:http://bioboxes.org/validate-biobox-file/
[inputs]:https://github.com/bioboxes/rfc/blob/master/container/short-read-assembler/rfc.mkd#inputs
[outputs]:https://github.com/bioboxes/rfc/blob/master/container/short-read-assembler/rfc.mkd#outputs
[file-validator binary]:https://s3-us-west-1.amazonaws.com/bioboxes-tools/validate-biobox-file/0.x.y/validate-biobox-file.tar.xz
[biobox file validator]:http://bioboxes.org/validate-biobox-file/
[new issue]:https://github.com/bioboxes/rfc/issues/new
[ADD]:https://docs.docker.com/reference/builder/#add
[script]:https://github.com/bioboxes/velvet/blob/master/assemble
[jq]:http://stedolan.github.io/jq/
[bioboxes assembler validator]:http://bioboxes.org/validator/short-read-assembler/
[biobox velvet]:https://github.com/bioboxes/velvet